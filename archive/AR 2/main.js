import * as THREE from 'three';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';
import { ARButton } from 'three/examples/jsm/webxr/ARButton.js';

console.log('üì± WebXR –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è:', navigator.xr);

const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.1, 100);
camera.position.set(0, 1.6, 3);

const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
renderer.setSize(window.innerWidth, window.innerHeight);
renderer.xr.enabled = true;
document.body.appendChild(renderer.domElement);

// ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π ARButton —Å WebXR-–ø—Ä–æ–≤–µ—Ä–∫–æ–π
if (navigator.xr) {
    const arButton = ARButton.createButton(renderer);
    document.body.appendChild(arButton);
} else {
    console.warn('‚ö†Ô∏è WebXR –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ!');
}

// ‚úÖ –û—Å–≤–µ—â–µ–Ω–∏–µ
const light = new THREE.DirectionalLight(0xffffff, 1);
light.position.set(5, 10, 7.5);
scene.add(light);
scene.add(new THREE.AmbientLight(0x404040, 0.5));

// ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ GLB-–º–æ–¥–µ–ª–∏
const loader = new GLTFLoader();
let model, mixer, actions = {};
const clock = new THREE.Clock();

loader.load('ANIME.glb', (gltf) => {
    model = gltf.scene;
    scene.add(model);

    console.log('üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π GLTF:', gltf);
    console.log('üé¨ –ù–∞–π–¥–µ–Ω–æ –∞–Ω–∏–º–∞—Ü–∏–π:', gltf.animations.map(a => a.name));

    if (gltf.animations.length > 0) {
        mixer = new THREE.AnimationMixer(model);
        gltf.animations.forEach((clip) => {
            console.log(`üé¨ –ê–Ω–∏–º–∞—Ü–∏—è: ${clip.name}`);
            const action = mixer.clipAction(clip);
            action.setLoop(THREE.LoopRepeat);
            actions[clip.name] = action;
        });

        // ‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –∞–Ω–∏–º–∞—Ü–∏—é
        const firstAnimation = gltf.animations[0].name;
        console.log(`‚èØ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é: ${firstAnimation}`);
        actions[firstAnimation].play();
    } else {
        console.warn('‚ö†Ô∏è –í –º–æ–¥–µ–ª–∏ –Ω–µ—Ç –∞–Ω–∏–º–∞—Ü–∏–π!');
    }
});

// ‚úÖ WebXR: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
function animate() {
    const delta = clock.getDelta();
    if (mixer) {
        mixer.update(delta);
    }
    renderer.render(scene, camera);
}

// ‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ WebXR
renderer.setAnimationLoop(() => {
    animate();
});

// ‚úÖ –§–∏–∫—Å –¥–ª—è WebXR (Safari + Android): –∞–Ω–∏–º–∞—Ü–∏—è —Å—Ç–∞—Ä—Ç—É–µ—Ç –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ AR
renderer.xr.addEventListener('sessionstart', () => {
    console.log('üöÄ –í—Ö–æ–¥ –≤ WebXR: –≤–∫–ª—é—á–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é');
    if (mixer && Object.keys(actions).length > 0) {
        Object.values(actions).forEach(action => action.play());
    }
});

// üîò –ö–ù–û–ü–ö–ê –î–õ–Ø –í–ö–õ–Æ–ß–ï–ù–ò–Ø –ê–ù–ò–ú–ê–¶–ò–ò –í–†–£–ß–ù–£–Æ
const button = document.createElement('button');
button.innerHTML = '‚ñ∂ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é';
Object.assign(button.style, {
    position: 'absolute', bottom: '10px', left: '10px',
    padding: '10px 20px', background: '#28a745', color: 'white',
    fontSize: '16px', border: 'none', borderRadius: '5px',
    cursor: 'pointer'
});

button.onclick = () => {
    console.log('üîò –í–∫–ª—é—á–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤—Ä—É—á–Ω—É—é');
    if (mixer && Object.keys(actions).length > 0) {
        Object.values(actions).forEach(action => action.play());
    } else {
        console.warn('‚ö†Ô∏è –ê–Ω–∏–º–∞—Ü–∏—è –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!');
    }
};

document.body.appendChild(button);
